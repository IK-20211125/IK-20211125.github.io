[{"content":"","date":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"CVEとは、個別製品中の脆弱性を対象として、米国政府の支援を受けた非営利団体のMITRE社が採番している識別子です。\nはじめに #こんにちは、IKです。\n自分が学んだことを文書として記録しておこうと考え、記述します。\n今回はCVE関連の用語についてまとめてみました。\nCVEとは #個別製品中の脆弱性を対象として、米国政府の支援を受けた非営利団体のMITRE社が採番している識別子です。\n脆弱性検査ツールや脆弱性対策情報提供サービスの多くがCVEを利用しています。\nIPAが運営しているJVNなどもCVEと同期しています。\nCVE（公式）\nCVE関連用語まとめ # 項目 名称 詳細 運営組織 CVEとの同期 CVE Common Vulnerabilities and Exposures セキュリティ上の脆弱性に対する共通の識別子を提供する標準的な辞書。 MITRE Corporation はい CWE Common Weakness Enumeration ソフトウェアやハードウェアの脆弱性に関する共通の弱点を定義する辞書。 MITRE Corporation いいえ CVSS Common Vulnerability Scoring System 脆弱性の深刻度を数値化するためのフレームワーク。 FIRST (Forum of Incident Response and Security Teams) いいえ NVD National Vulnerability Database アメリカ国立標準技術研究所（NIST）が提供するCVEに関する情報をまとめたデータベース。 NIST (National Institute of Standards and Technology) はい JVN Japan Vulnerability Notes IPA（情報処理推進機構）が提供する脆弱性情報ポータル。日本国内での脆弱性情報を提供。 IPA (Information-Technology Promotion Agency, Japan) はい CVEとCWEの違い # 特徴 CVE CWE 定義 セキュリティ上の脆弱性に対する共通の識別子を提供する標準的な辞書。\n個別製品中の脆弱性を対象としている。 ソフトウェアやハードウェアの脆弱性に関する\n共通の弱点を定義する辞書。\n例：XSS,SQLインジェクション など 目的 脆弱性の識別子を統一して管理し、情報の共有と追跡を容易にする。 脆弱性の根本的な原因や弱点を定義し、開発者やセキュリティ専門家に対して教育的な役割を果たす。 組織 MITRE Corporation MITRE Corporation 種類 識別子 弱点 CWE といえばこれ # 共通脆弱性タイプ一覧CWE概説 - IPA\n終わりに #CVE関連の用語についてまとめました。\n基本的には生成AIに書かせましたが、ある程度は正確そうですね。\n最後までお読みいただきありがとうございました。\n","date":"2024/05/05","permalink":"/blog/2024/05/05/cve/","section":"Blog","summary":"CVEとは、個別製品中の脆弱性を対象として、米国政府の支援を受けた非営利団体のMITRE社が採番している識別子です。","title":"CVE関連の用語まとめてみた"},{"content":"","date":null,"permalink":"/","section":"IKのホームページ","summary":"","title":"IKのホームページ"},{"content":"今回は共通鍵暗号方式に使われている排他的論理和の特徴についてまとめました。\nはじめに #こんにちは、IKです。\n自分が学んだことを文書として記録しておこうと考え、記述します。\n今回は共通鍵暗号方式に使われている排他的論理和の特徴についてまとめました。\n共通鍵暗号方式とは #まず、簡単に共通鍵暗号方式とは何なのかについて\n共通鍵暗号法方式とは、暗号化と復号化に同じ鍵を用いる暗号方式です。\n現実世界の鍵と同じです。\nそして、この暗号化、復号化に使われる鍵には排他的論理和が大きく関わっています。\nでは、次に排他的論理和とは何なのかについて書いていきたいと思います。\n排他的論理和とは #排他的論理和とは、「2つの入力のどちらか片方が真でもう片方が偽の時には結果が真となり、両方とも真あるいは両方とも偽の時は偽となる演算」とWikipediaには書かれています。\n排他的論理和 - Wikipedia\n文字にするとややこしいので式にしてみました。\n(排他的論理和は xor や ⊕ で表現されます)\n演算規則 0 ⊕ 0 = 0 0 ⊕ 1 = 1 1 ⊕ 0 = 1 1 ⊕ 1 = 0 基本的にはこの4つの式で排他的論理和は表現されます。\nでは、次に共通鍵暗号方式に使われている排他的論理和の性質をまとめます。\n排他的論理和の性質 #排他的論理和には重要な性質が3つあります。\n性質①（同じものを計算すると0になる）\na ⊕ a = 0 性質②（0を計算しても変化しない）\na ⊕ 0 = a 性質③（値は入れ替えることができる）\na ⊕ b = b ⊕ a この3つの性質を利用して共通鍵暗号方式は成り立っています。\nでは、実際にどのようにこの性質が使われているか見てみましょう。\n共通鍵暗号方式での排他的論理和の使われ方 #では、簡単に共通鍵暗号方式にどのように排他的論理和が使われているのかを見てましょう。\n※実際はもっと複雑に暗号化されますが、上記の3つの性質を軸としています。\nAさんからBさんへ暗号化通信を行うと仮定します。 まず、それぞれの値を二進数で表します。\n送信したい平文 : 1010\nAさんBさんが保有している共通鍵 : 0011\n実際に暗号化して送信 #では、実際に暗号化して送信してみましょう。\nまず、Aさんが共通鍵で平文を暗号化します。 1010 ⊕ 0011 = 1001 Aさんが作成した暗号文1001をBさんに送信します。 Bさんが暗号文1001を共通鍵で復号化します。 1001 ⊕ 0011 = 1010 BさんはAさんが送信した平文1010を得ることができました。 この流れを一つの式へ #この流れを一つの式にしてみましょう。\n1010 ⊕ ( 0011 ⊕ 0011 ) = 1010 上記の性質①（同じもの計算すると0になる）から 0011 ⊕ 0011は0となります。\n0011 ⊕ 0011 = 0000 そして、上記の性質②（0を計算しても変化しない）から平文に0を計算しても平文から変化しません。\n1010 ⊕ 0000 = 1010 このようにして、共通鍵暗号方式は暗号化と復号化を行っております。\n実際のAESなどはもっと複雑な工程を経て暗号化されますが、軸となる技術はこの排他的論理和の性質を利用しています。\n終わりに #共通鍵暗号方式に利用される排他的論理和の性質について書きました。\n備忘録としてこの文書を残しますが、誰かの学びの糧となれば幸いです。\n最後までお読みいただきありがとうございました。\n","date":"2024/05/04","permalink":"/blog/2024/05/04/key-xor/","section":"Blog","summary":"今回は共通鍵暗号方式に使われている排他的論理和の特徴についてまとめました。","title":"共通鍵暗号方式に使われる排他的論理和の性質"},{"content":"","date":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About"},{"content":"Hugo\u0026amp;GitHubPagesにGoogleAnalyticsを埋め込み、GoogleSearchConsoleに対応させた手順\nはじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n公式ドキュメントも適宜利用してください。\n今回は、参考にしたリンクと手順を箇条書きで書いていく形の簡単な文書であるため、適宜リンク先に飛び参考にしてください。\n環境 # 筆者の環境 OS macOS 14.4.1 arm64 SoC Apple M3 使用テーマ（Hugo） Congo GoogleAnalyticsの埋め込み #下記サイトを参考にしてGoogleAnalyticsを埋め込みました\nGitHub Pages+HugoでつくったブログにGoogle Analyticsを埋め込む\n使用しているテーマがCongoの場合はconfig/_default/config.tomlに設定を追記してください。\nGoogleSearchConsole #下記サイトを参考にしてGoogleSearchConsoleに対応させました。\nHUGO + GitHub Pages で作ったブログをGoogle Search Consoleに登録する方法\n終わりに #このサイトにクローラーが来てくれなかったため、今回、GoogleAnalytics、GoogleSearchConsoleに対応させました。\nGoogle以外の検索エンジンにも対応させたいですね。\nあと、そろそろ自分のドメインも購入したいですね。\nお読みいただきありがとうございました。\n","date":"2024/04/28","permalink":"/blog/2024/04/28/google-analytics/","section":"Blog","summary":"Hugo\u0026amp;GitHubPagesにGoogleAnalyticsを埋め込み、GoogleSearchConsoleに対応させた手順","title":"Hugo+GitHubPagesをGoogleSearchConsoleに対応させた手順"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" マルウエアの教科書 増補改訂版\n体系的に学ぶ 安全なWebアプリケーションの作り方 第2版\nSC対策おすすめ書籍 # 2024 情報処理安全確保支援士「専門知識+午後問題」の重点対策\nうかる！ 情報処理安全確保支援士 午後問題集 第2版 ","date":"2024/04/28","permalink":"/about/books/","section":"IKについて","summary":"マルウエアの教科書 増補改訂版","title":"セキュリティ系おすすめ書籍"},{"content":"Hugoで作成したブログをGitHub Actionsを用いてビルドからデプロイまで行いました。\nはじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n今回は、参考にしたリンクと手順を箇条書きで書いていく形の簡単な文書であるため、適宜リンク先に飛び参考にしてください。\n環境 # 筆者の環境 OS macOS 14.4.1 arm64 SoC Apple M3 ビルド方法 GitHub Actions GitHub Actionsを用いてのビルド #下記のサイト（公式）を参照して、GitHubActionsを導入しました。\nHost on GitHub Pages\n静的にビルドする方法 #以前に公開した下記の記事で紹介しています。\nGitHubPagesとHugoCongoでブログを作成する手順\n終わりに #Hugoで作成したブログをGitHub Actionsを用いてビルドからデプロイまで行いました。\nローカルでビルドしてからのデプロイよりも、GitHub Actionsを使ってクラウド上で行ったほうが楽ですね。\nお読みいただきありがとうございました。\n","date":"2024/04/23","permalink":"/blog/2024/04/23/github-actions/","section":"Blog","summary":"Hugoで作成したブログをGitHub Actionsを用いてビルドからデプロイまで行いました。","title":"HugoをGitHubActionsでビルド、デプロイした手順"},{"content":"まず、powerline-shellのインストール、環境構築から始めます。\nはじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n公式ドキュメントも適宜利用してください。\nb-ryan / powerline-shell\n環境 # 筆者の環境 OS macOS 14.4.1 arm64 SoC Apple M3 インストール方法 Python3 (pip3) powerline-shellのインストール #まず、powerline-shellのインストール、環境構築から始めます。\nインストール方法にpip3を使います。\nPython3の環境、またはpip3がPCに入っていない場合、適宜導入してください。\n(Macbook M3 にはデフォルトでPython3がインストールされていました)\npip3 install powerline-shell .zshrc ファイルの作成 #今回、zshの設定を変更していくため、.zshrcファイルを作成します。\n作成するディレクトリはユーザのホームディレクトリ直下です。\n(デフォルトでは作成されていないため、自身で作成してください)\nPython3の環境変数設定 #Python3の環境変数が筆者の環境では設定されていなかったため、設定します。\n先ほど作成した.zshrcファイル内に下記を記述してください。\n(pathは自身の環境のPythonのpathに置き換えてください)\nexport PATH=\u0026#34;/Users/USER/Library/Python/3.9/bin:$PATH\u0026#34; .zshrc にpowerline-shell用のスクリプトを記述 #.zshrc内にpowerline-shell用のスクリプトを記述します。\n.zshrc 内に下記のスクリプトを記述してください。\nfunction powerline_precmd() { PS1=\u0026#34;$(powerline-shell --shell zsh $?)\u0026#34; } function install_powerline_precmd() { for s in \u0026#34;${precmd_functions[@]}\u0026#34;; do if [ \u0026#34;$s\u0026#34; = \u0026#34;powerline_precmd\u0026#34; ]; then return fi done precmd_functions+=(powerline_precmd) } if [ \u0026#34;$TERM\u0026#34; != \u0026#34;linux\u0026#34; -a -x \u0026#34;$(command -v powerline-shell)\u0026#34; ]; then install_powerline_precmd fi powerline-shellの設定ファイルを作成 #powershell用の設定ファイルを作成します。\n下記のようなディレクトリ構造になるように作成してください。\n~/.config/powerline-shell/config.json\nconfig.jsonに下記の設定を記述してください。\n(筆者が現在使用している設定、ユーザ名、PC名を表示しないようにしています)\n{ \u0026#34;segments\u0026#34;: [ \u0026#34;virtual_env\u0026#34;, \u0026#34;ssh\u0026#34;, \u0026#34;cwd\u0026#34;, \u0026#34;git\u0026#34;, \u0026#34;hg\u0026#34;, \u0026#34;jobs\u0026#34;, \u0026#34;root\u0026#34; ] } フォントの設定 #現状だとshellを開いても文字化けしていると思います。\nそのため、powerline-shell用のフォントをインストールします。\n下記のリンク先のリポジトリをクローンして、install.shを用いてフォントをインストールし、shellのフォントを変更してください。\npowerline / fonts\n終わりに #MacBookにpowerline-shellを導入しました。\n気が向いたらQiitaなどにも上げようと思います。\nお読みいただきありがとうございました。\n","date":"2024/04/06","permalink":"/blog/2024/04/06/powerline-shell/","section":"Blog","summary":"まず、powerline-shellのインストール、環境構築から始めます。","title":"MacBookへのpowerline-shell導入手順"},{"content":"","date":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog"},{"content":"Hugoのテーマの一つCongoとGitHub Pagesでブログを作りました。\nはじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n今回は、参考にしたリンクと手順を箇条書きで書いていく形の簡単な文書であるため、適宜リンク先に飛び参考にしてください。\n環境 # 筆者の環境 OS Windows10 デプロイ方法 GitHub Pages 使用テーマ（Hugo） Congo Hugoのインストール #まず、Hugoのインストール、環境構築から始めます。\n下記のリンクが参考にします。\nHugoのテーマ設定前まで参考にして、Hugoの環境を構築してください。\nHugo使ってみた\nCongoのインストール #Hugoのテーマの一つであるCongoのインストールを行います。\n下記のリンクを参考にします。\nインストール手順の中の「Install using git」を参考にしてください。\nCongo公式ドキュメント（Installation）\n具体的には、下記のコマンドを利用してください。\n※ mywebsiteは任意の名称（quickstartなど）になります。\ncd mywebsite git init git submodule add -b stable https://github.com/jpanther/congo.git themes/congo Configの構造設定 #Configのディレクトリ構造変更を行っていきます。\n下記のリンクを参考にします。\n「Organising content」 , 「Basic configuration」の順で参考にしてください。\nCongo公式ドキュメント（Getting Started）\n具体的には、下記の図のようなディレクトリ構造にします。\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── congo 変更手順 （quickstartは任意の名称） 既存の設定ファイル（quickstart直下の.tomlファイル）を削除。 quickstart/themes/congo/config のディレクトリをquickstart直下にコピー。 Configの内容変更 #Config（./config/_defalut/）の内容を変更していきます。\n下記のリンクを参考にします。\nSpecial thanks to sunset0916 !\nCongo公式ドキュメント（Configuration）\nGitHub sunset0916.net\n変更手順 languages.en.toml から languages.ja.toml に変更。 menus.en.toml から menus.ja.toml に変更。 それぞれの.tomlファイルの中身をsunest0916.netの内容を参考にしながら変更。 コンテンツやアイコンの追加 #コンテンツやアイコン（favicon）を追加していきます\n下記のリンクを参考にします。\nContent\nCongo公式ドキュメント（Content Examples） Favicon\nCongo公式ドキュメント（Partials） 適宜、hugo serve -D でサーバを起動し、http://localhost:1313で確認しながら進めてください。\nデプロイ方法 #最後に、GitHub Pagesでブログを公開しましょう。\nGitHub PagesでWebサイトを公開 #まず、GitHub PagesでWebサイトを公開します。\n下記のリンクを参考にします。\ngithub.ioを使ってMySiteを作ろう\n静的ページの生成 #次に、ローカル環境で作成したサイトを静的ページ（HTML化）として生成します。\n下記のリンクの「静的ページの生成」を参考にします。\nゼロからHugoでWebページをつくって，GitHub Pagesで公開するまで\n手順 hugo コマンドを入力。 quickstart/public直下にhtml、css、jsで作成されたページが作成される。 ※public直下のindex.htmlを開いてもディレクトリの参照形式の関係で綺麗に表示されませんが、気にしないでください。\nGitHub Pagesにブログを公開 #最後に、作成した静的ページをGitHub Pagesに公開します。\n「GitHub PagesでWebサイトを公開」の際に作成したローカルディレクトリにpublic直下のファイルをすべてコピーしてpushしてください。\n※反映までに5分ほどかかることがあります。\nブログ内に画像を入れる方法 #このブログを上げる際に手こずったのでそれについても書いておきたいと思います。\nまず、ブログのヘッダ画像を入れる方法で困りましたが、\nヘッダ画像ファイルの名称にthumbを付けることで解決しました。\nfeatureを付けると、ブログ内でヘッダ画像が冒頭に表示されます。\n次に、ブログ内に画像を入れる方法で困りましたが、\nHugoの拡張機能（Hugo Extended）を入れることで解決しました。\n具体的なコマンド\nwinget install Hugo.Hugo.Extended 役に立ったリンク\nResize : image this feature is not available in your current Hugo version\nWindows Hugo\n終わりに #Hugo Congo インストールからGitHub Pagesに公開まで行いました。\nHugo Congoは公式ドキュメントがかなりわかりやすかったので基本的にはそこを参考に作成しました。\n気が向いたらQiitaなどにも上げようと思います。\n初めてのブログであるため、分かりにくい部分が多かったと思いますがご了承ください。\nお読みいただきありがとうございました。\n","date":"2024/03/03","permalink":"/blog/2024/03/03/hugo-congo/","section":"Blog","summary":"Hugoのテーマの一つCongoとGitHub Pagesでブログを作りました。","title":"GitHubPagesとHugoCongoでブログを作成する手順"},{"content":"","date":null,"permalink":"/categories/about/","section":"Categories","summary":"","title":"About"},{"content":"\n新着記事 #","date":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"\n自己紹介 #セキュリティ専門家を目指す人。\n2021年11月25日からGitHubを利用しているため、IK-20211125。\n2024年05月03日からX始めました。\nBlogは基本的に備忘録です。\n関連記事 #","date":null,"permalink":"/about/","section":"IKについて","summary":"","title":"IKについて"}]