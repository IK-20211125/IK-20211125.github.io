[{"content":"","date":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/","section":"IK-20211125のウェブサイト","summary":"","title":"IK-20211125のウェブサイト"},{"content":"はじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n公式ドキュメントも適宜利用してください。\nb-ryan / powerline-shell\n環境 # 筆者の環境 OS macOS 14.4.1 arm64 SoC Apple M3 インストール方法 Python3 (pip3) powerline-shellのインストール #まず、powerline-shellのインストール、環境構築から始めます。\nインストール方法にpip3を使います。\nPython3の環境、またはpip3がPCに入っていない場合、適宜導入してください。\n(Macbook M3 にはデフォルトでPython3がインストールされていました)\npip3 install powerline-shell .zshrc ファイルの作成 #今回、zshの設定を変更していくため、.zshrcファイルを作成します。\n作成するディレクトリはユーザのホームディレクトリ直下です。\n(デフォルトでは作成されていないため、自身で作成してください)\nPython3の環境変数設定 #Python3の環境変数が筆者の環境では設定されていなかったため、設定します。\n先ほど作成した.zshrcファイル内に下記を記述してください。\n(pathは自身の環境のPythonのpathに置き換えてください)\nexport PATH=\u0026#34;/Users/USER/Library/Python/3.9/bin:$PATH\u0026#34; .zshrc にpowerline-shell用のスクリプトを記述 #.zshrc内にpowerline-shell用のスクリプトを記述します。\n.zshrc 内に下記のスクリプトを記述してください。\nfunction powerline_precmd() { PS1=\u0026#34;$(powerline-shell --shell zsh $?)\u0026#34; } function install_powerline_precmd() { for s in \u0026#34;${precmd_functions[@]}\u0026#34;; do if [ \u0026#34;$s\u0026#34; = \u0026#34;powerline_precmd\u0026#34; ]; then return fi done precmd_functions+=(powerline_precmd) } if [ \u0026#34;$TERM\u0026#34; != \u0026#34;linux\u0026#34; -a -x \u0026#34;$(command -v powerline-shell)\u0026#34; ]; then install_powerline_precmd fi powerline-shellの設定ファイルを作成 #powershell用の設定ファイルを作成します。\n下記のようなディレクトリ構造になるように作成してください。\n~/.config/powerline-shell/config.json\nconfig.jsonに下記の設定を記述してください。\n(筆者が現在使用している設定、ユーザ名、PC名を表示しないようにしています)\n{ \u0026#34;segments\u0026#34;: [ \u0026#34;virtual_env\u0026#34;, \u0026#34;ssh\u0026#34;, \u0026#34;cwd\u0026#34;, \u0026#34;git\u0026#34;, \u0026#34;hg\u0026#34;, \u0026#34;jobs\u0026#34;, \u0026#34;root\u0026#34; ] } フォントの設定 #現状だとshellを開いても文字化けしていると思います。\nそのため、powerline-shell用のフォントをインストールします。\n下記のリンク先のリポジトリをクローンして、install.shを用いてフォントをインストールし、shellのフォントを変更してください。\npowerline / fonts\n終わりに #MacBookにpowerline-shellを導入しました。\n気が向いたらQiitaなどにも上げようと思います。\nお読みいただきありがとうございました。\n","date":"2024/04/06","permalink":"/blog/2024/04/06/powerline-shell/","section":"Blog","summary":"はじめに #こんにちは、IKです。","title":"MacBookへのpowerline-shell導入手順"},{"content":"","date":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog"},{"content":"はじめに #こんにちは、IKです。\n自分が行ったことを文書として記録しておこうと考え、記述します。\n今回は、参考にしたリンクと手順を箇条書きで書いていく形の簡単な文書であるため、適宜リンク先に飛び参考にしてください。\n環境 # 筆者の環境 OS Windows10 デプロイ方法 GitHub Pages 使用テーマ（Hugo） Congo Hugoのインストール #まず、Hugoのインストール、環境構築から始めます。\n下記のリンクが参考にします。\nHugoのテーマ設定前まで参考にして、Hugoの環境を構築してください。\nHugo使ってみた\nCongoのインストール #Hugoのテーマの一つであるCongoのインストールを行います。\n下記のリンクを参考にします。\nインストール手順の中の「Install using git」を参考にしてください。\nCongo公式ドキュメント（Installation）\n具体的には、下記のコマンドを利用してください。\n※ mywebsiteは任意の名称（quickstartなど）になります。\ncd mywebsite git init git submodule add -b stable https://github.com/jpanther/congo.git themes/congo Configの構造設定 #Configのディレクトリ構造変更を行っていきます。\n下記のリンクを参考にします。\n「Organising content」 , 「Basic configuration」の順で参考にしてください。\nCongo公式ドキュメント（Getting Started）\n具体的には、下記の図のようなディレクトリ構造にします。\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── congo 変更手順 （quickstartは任意の名称） 既存の設定ファイル（quickstart直下の.tomlファイル）を削除。 quickstart/themes/congo/config のディレクトリをquickstart直下にコピー。 Configの内容変更 #Config（./config/_defalut/）の内容を変更していきます。\n下記のリンクを参考にします。\nSpecial thanks to sunset0916 !\nCongo公式ドキュメント（Configuration）\nGitHub sunset0916.net\n変更手順 languages.en.toml から languages.ja.toml に変更。 menus.en.toml から menus.ja.toml に変更。 それぞれの.tomlファイルの中身をsunest0916.netの内容を参考にしながら変更。 コンテンツやアイコンの追加 #コンテンツやアイコン（favicon）を追加していきます\n下記のリンクを参考にします。\nContent\nCongo公式ドキュメント（Content Examples） Favicon\nCongo公式ドキュメント（Partials） 適宜、hugo serve -D でサーバを起動し、http://localhost:1313で確認しながら進めてください。\nデプロイ方法 #最後に、GitHub Pagesでブログを公開しましょう。\nGitHub PagesでWebサイトを公開 #まず、GitHub PagesでWebサイトを公開します。\n下記のリンクを参考にします。\ngithub.ioを使ってMySiteを作ろう\n静的ページの生成 #次に、ローカル環境で作成したサイトを静的ページ（HTML化）として生成します。\n下記のリンクの「静的ページの生成」を参考にします。\nゼロからHugoでWebページをつくって，GitHub Pagesで公開するまで\n手順 hugo コマンドを入力。 quickstart/public直下にhtml、css、jsで作成されたページが作成される。 ※public直下のindex.htmlを開いてもディレクトリの参照形式の関係で綺麗に表示されませんが、気にしないでください。\nGitHub Pagesにブログを公開 #最後に、作成した静的ページをGitHub Pagesに公開します。\n「GitHub PagesでWebサイトを公開」の際に作成したローカルディレクトリにpublic直下のファイルをすべてコピーしてpushしてください。\n※反映までに5分ほどかかることがあります。\nブログ内に画像を入れる方法 #このブログを上げる際に手こずったのでそれについても書いておきたいと思います。\nまず、ブログのヘッダ画像を入れる方法で困りましたが、\nヘッダ画像ファイルの名称にthumbを付けることで解決しました。\nfeatureを付けると、ブログ内でヘッダ画像が冒頭に表示されます。\n次に、ブログ内に画像を入れる方法で困りましたが、\nHugoの拡張機能（Hugo Extended）を入れることで解決しました。\n具体的なコマンド\nwinget install Hugo.Hugo.Extended 役に立ったリンク\nResize : image this feature is not available in your current Hugo version\nWindows Hugo\n終わりに #Hugo Congo インストールからGitHub Pagesに公開まで行いました。\nHugo Congoは公式ドキュメントがかなりわかりやすかったので基本的にはそこを参考に作成しました。\n気が向いたらQiitaなどにも上げようと思います。\n初めてのブログであるため、分かりにくい部分が多かったと思いますがご了承ください。\nお読みいただきありがとうございました。\n","date":"2024/03/03","permalink":"/blog/2024/03/03/hugo-congo/","section":"Blog","summary":"はじめに #こんにちは、IKです。","title":"GitHubPagesとHugoCongoでブログを作成する手順"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About"},{"content":"","date":null,"permalink":"/categories/about/","section":"Categories","summary":"","title":"About"},{"content":"\n新着記事 #","date":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"\n自己紹介 #セキュリティ専門家。\n2021年11月25日からGitHubを利用しているため、IK-20211125。\n旧 GitHub Pages #文字数チェッカー\n関連記事 #","date":null,"permalink":"/about/","section":"IKについて","summary":"","title":"IKについて"}]